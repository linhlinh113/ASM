package com.abcnews.dao;

import com.abcnews.entity.News;
import com.abcnews.util.DBUtil;
import java.sql.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class NewsDAO {

    public List<News> getAll() throws Exception {
        List<News> list = new ArrayList<>();
        String sql = "SELECT * FROM NEWS ORDER BY PostedDate DESC";
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                News n = new News();
                n.setId(rs.getString("Id"));
                n.setTitle(rs.getString("Title"));
                n.setContent(rs.getString("Content"));
                n.setImage(rs.getString("Image"));
                n.setPostedDate(rs.getDate("PostedDate"));
                n.setAuthor(rs.getString("Author"));
                n.setViewCount(rs.getInt("ViewCount"));
                n.setCategoryId(rs.getString("CategoryId"));
                n.setHome(rs.getBoolean("Home"));
                list.add(n);
            }
        }
        return list;
    }

    public News getById(String id) throws Exception {
        String sql = "SELECT * FROM NEWS WHERE Id = ?";
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    News n = new News();
                    n.setId(rs.getString("Id"));
                    n.setTitle(rs.getString("Title"));
                    n.setContent(rs.getString("Content"));
                    n.setImage(rs.getString("Image"));
                    n.setPostedDate(rs.getDate("PostedDate"));
                    n.setAuthor(rs.getString("Author"));
                    n.setViewCount(rs.getInt("ViewCount"));
                    n.setCategoryId(rs.getString("CategoryId"));
                    n.setHome(rs.getBoolean("Home"));
                    return n;
                }
            }
        }
        return null;
    }

    public boolean insert(News n) throws Exception {
        String sql = "INSERT INTO NEWS (Id, Title, Content, Image, PostedDate, Author, ViewCount, CategoryId, Home) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, n.getId());
            ps.setString(2, n.getTitle());
            ps.setString(3, n.getContent());
            ps.setString(4, n.getImage());
            if (n.getPostedDate() != null) {
                ps.setDate(5, new java.sql.Date(n.getPostedDate().getTime()));
            } else {
                ps.setNull(5, Types.DATE);
            }
            ps.setString(6, n.getAuthor());
            ps.setInt(7, n.getViewCount());
            ps.setString(8, n.getCategoryId());
            ps.setBoolean(9, n.isHome());
            return ps.executeUpdate() > 0;
        }
    }

    public boolean update(News n) throws Exception {
        String sql = "UPDATE NEWS SET Title=?, Content=?, Image=?, PostedDate=?, Author=?, ViewCount=?, CategoryId=?, Home=? WHERE Id=?";
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, n.getTitle());
            ps.setString(2, n.getContent());
            ps.setString(3, n.getImage());
            if (n.getPostedDate() != null) {
                ps.setDate(4, new java.sql.Date(n.getPostedDate().getTime()));
            } else {
                ps.setNull(4, Types.DATE);
            }
            ps.setString(5, n.getAuthor());
            ps.setInt(6, n.getViewCount());
            ps.setString(7, n.getCategoryId());
            ps.setBoolean(8, n.isHome());
            ps.setString(9, n.getId());
            return ps.executeUpdate() > 0;
        }
    }

    public boolean delete(String id) throws Exception {
        String sql = "DELETE FROM NEWS WHERE Id=?";
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, id);
            return ps.executeUpdate() > 0;
        }
    }

    public void incrementViewCount(String id) throws Exception {
        String sql = "UPDATE NEWS SET ViewCount = ViewCount + 1 WHERE Id = ?";
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, id);
            ps.executeUpdate();
        }
    }

    public List<News> getByCategory(String categoryId) throws Exception {
        List<News> list = new ArrayList<>();
        String sql = "SELECT * FROM NEWS WHERE CategoryId = ? ORDER BY PostedDate DESC";
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, categoryId);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    News n = new News();
                    n.setId(rs.getString("Id"));
                    n.setTitle(rs.getString("Title"));
                    n.setContent(rs.getString("Content"));
                    n.setImage(rs.getString("Image"));
                    n.setPostedDate(rs.getDate("PostedDate"));
                    n.setAuthor(rs.getString("Author"));
                    n.setViewCount(rs.getInt("ViewCount"));
                    n.setCategoryId(rs.getString("CategoryId"));
                    n.setHome(rs.getBoolean("Home"));
                    list.add(n);
                }
            }
        }
        return list;
    }

    public List<News> getHotNews(int limit) throws Exception {
        List<News> list = new ArrayList<>();
        String sql = "SELECT TOP (?) * FROM NEWS ORDER BY ViewCount DESC";
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, limit);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    News n = new News();
                    n.setId(rs.getString("Id"));
                    n.setTitle(rs.getString("Title"));
                    n.setContent(rs.getString("Content"));
                    n.setImage(rs.getString("Image"));
                    n.setPostedDate(rs.getDate("PostedDate"));
                    n.setAuthor(rs.getString("Author"));
                    n.setViewCount(rs.getInt("ViewCount"));
                    n.setCategoryId(rs.getString("CategoryId"));
                    n.setHome(rs.getBoolean("Home"));
                    list.add(n);
                }
            }
        }
        return list;
    }

    public List<News> getNewestNews(int limit) throws Exception {
        List<News> list = new ArrayList<>();
        String sql = "SELECT TOP (?) * FROM NEWS ORDER BY PostedDate DESC";
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, limit);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    News n = new News();
                    n.setId(rs.getString("Id"));
                    n.setTitle(rs.getString("Title"));
                    n.setContent(rs.getString("Content"));
                    n.setImage(rs.getString("Image"));
                    n.setPostedDate(rs.getDate("PostedDate"));
                    n.setAuthor(rs.getString("Author"));
                    n.setViewCount(rs.getInt("ViewCount"));
                    n.setCategoryId(rs.getString("CategoryId"));
                    n.setHome(rs.getBoolean("Home"));
                    list.add(n);
                }
            }
        }
        return list;
    }

    public List<News> getHomeNews() throws Exception {
        List<News> list = new ArrayList<>();
        String sql = "SELECT * FROM NEWS WHERE Home = 1 ORDER BY PostedDate DESC";
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                News n = new News();
                n.setId(rs.getString("Id"));
                n.setTitle(rs.getString("Title"));
                n.setContent(rs.getString("Content"));
                n.setImage(rs.getString("Image"));
                n.setPostedDate(rs.getDate("PostedDate"));
                n.setAuthor(rs.getString("Author"));
                n.setViewCount(rs.getInt("ViewCount"));
                n.setCategoryId(rs.getString("CategoryId"));
                n.setHome(rs.getBoolean("Home"));
                list.add(n);
            }
        }
        return list;
    }

    public List<News> getByAuthor(String authorId) throws Exception {
        List<News> list = new ArrayList<>();
        String sql = "SELECT * FROM NEWS WHERE Author = ? ORDER BY PostedDate DESC";
        try (Connection con = DBUtil.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, authorId);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    News n = new News();
                    n.setId(rs.getString("Id"));
                    n.setTitle(rs.getString("Title"));
                    n.setContent(rs.getString("Content"));
                    n.setImage(rs.getString("Image"));
                    n.setPostedDate(rs.getDate("PostedDate"));
                    n.setAuthor(rs.getString("Author"));
                    n.setViewCount(rs.getInt("ViewCount"));
                    n.setCategoryId(rs.getString("CategoryId"));
                    n.setHome(rs.getBoolean("Home"));
                    list.add(n);
                }
            }
        }
        return list;
    }
}